
#######################################################################
Please cite the following paper when using nnU-Net:
Isensee, F., Jaeger, P. F., Kohl, S. A., Petersen, J., & Maier-Hein, K. H. (2021). nnU-Net: a self-configuring method for deep learning-based biomedical image segmentation. Nature methods, 18(2), 203-211.
#######################################################################

There are 7 cases in the source folder
I am process 0 out of 1 (max process ID is 0, we start counting with 0!)
There are 7 cases that I would like to predict

Predicting 1003:
perform_everything_on_device: True
Input shape: torch.Size([1, 229, 208, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([229, 208, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 69], [0, 40, 80], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 229, 208, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([229, 208, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 69], [0, 40, 80], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 229, 208, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([229, 208, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 69], [0, 40, 80], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 229, 208, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([229, 208, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 69], [0, 40, 80], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 229, 208, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([229, 208, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 69], [0, 40, 80], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
old shape: (241, 212, 162), new_shape: [241 212 162], old_spacing: [np.float64(1.0), np.float64(1.0), np.float64(1.0)], new_spacing: [1.0, 1.0, 1.0], fn_data: functools.partial(<function resample_data_or_seg_to_shape at 0x7f3532bd2fc0>, is_seg=False, order=3, order_z=0, force_separate_z=None)
old shape: (289, 256, 174), new_shape: [289 256 174], old_spacing: [np.float64(1.0), np.float64(1.0), np.float64(1.0)], new_spacing: [1.0, 1.0, 1.0], fn_data: functools.partial(<function resample_data_or_seg_to_shape at 0x7f3532bd2fc0>, is_seg=False, order=3, order_z=0, force_separate_z=None)
Prediction done
sending off prediction to background worker for resampling and export
done with 1003

Predicting 1004:
perform_everything_on_device: True
Input shape: torch.Size([1, 241, 212, 162])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 18, image size is torch.Size([241, 212, 162]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 40, 81], [0, 42, 84], [0, 50]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 241, 212, 162])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 18, image size is torch.Size([241, 212, 162]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 40, 81], [0, 42, 84], [0, 50]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 241, 212, 162])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 18, image size is torch.Size([241, 212, 162]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 40, 81], [0, 42, 84], [0, 50]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 241, 212, 162])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 18, image size is torch.Size([241, 212, 162]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 40, 81], [0, 42, 84], [0, 50]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 241, 212, 162])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 18, image size is torch.Size([241, 212, 162]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 40, 81], [0, 42, 84], [0, 50]]
move image to device cuda
preallocating results arrays on device cuda
old shape: (231, 212, 160), new_shape: [231 212 160], old_spacing: [np.float64(1.0), np.float64(1.0), np.float64(1.0)], new_spacing: [1.0, 1.0, 1.0], fn_data: functools.partial(<function resample_data_or_seg_to_shape at 0x7f64a78eefc0>, is_seg=False, order=3, order_z=0, force_separate_z=None)
old shape: (227, 212, 159), new_shape: [227 212 159], old_spacing: [np.float64(1.0), np.float64(1.0), np.float64(1.0)], new_spacing: [1.0, 1.0, 1.0], fn_data: functools.partial(<function resample_data_or_seg_to_shape at 0x7f64a78eefc0>, is_seg=False, order=3, order_z=0, force_separate_z=None)
Prediction done
sending off prediction to background worker for resampling and export
done with 1004

Predicting 1011:
perform_everything_on_device: True
Input shape: torch.Size([1, 231, 212, 160])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([231, 212, 160]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 71], [0, 42, 84], [0, 48]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 231, 212, 160])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([231, 212, 160]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 71], [0, 42, 84], [0, 48]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 231, 212, 160])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([231, 212, 160]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 71], [0, 42, 84], [0, 48]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 231, 212, 160])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([231, 212, 160]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 71], [0, 42, 84], [0, 48]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 231, 212, 160])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([231, 212, 160]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 71], [0, 42, 84], [0, 48]]
move image to device cuda
preallocating results arrays on device cuda
old shape: (229, 208, 165), new_shape: [229 208 165], old_spacing: [np.float64(1.0), np.float64(1.0), np.float64(1.0)], new_spacing: [1.0, 1.0, 1.0], fn_data: functools.partial(<function resample_data_or_seg_to_shape at 0x7ff23ec32fc0>, is_seg=False, order=3, order_z=0, force_separate_z=None)
old shape: (233, 211, 166), new_shape: [233 211 166], old_spacing: [np.float64(1.0), np.float64(1.0), np.float64(1.0)], new_spacing: [1.0, 1.0, 1.0], fn_data: functools.partial(<function resample_data_or_seg_to_shape at 0x7ff23ec32fc0>, is_seg=False, order=3, order_z=0, force_separate_z=None)
old shape: (216, 207, 165), new_shape: [216 207 165], old_spacing: [np.float64(1.0), np.float64(1.0), np.float64(1.0)], new_spacing: [1.0, 1.0, 1.0], fn_data: functools.partial(<function resample_data_or_seg_to_shape at 0x7ff23ec32fc0>, is_seg=False, order=3, order_z=0, force_separate_z=None)
Prediction done
sending off prediction to background worker for resampling and export
done with 1011

Predicting 1113:
perform_everything_on_device: True
Input shape: torch.Size([1, 233, 211, 166])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([233, 211, 166]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 73], [0, 42, 83], [0, 54]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 233, 211, 166])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([233, 211, 166]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 73], [0, 42, 83], [0, 54]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 233, 211, 166])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([233, 211, 166]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 73], [0, 42, 83], [0, 54]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 233, 211, 166])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([233, 211, 166]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 73], [0, 42, 83], [0, 54]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 233, 211, 166])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([233, 211, 166]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 73], [0, 42, 83], [0, 54]]
move image to device cuda
preallocating results arrays on device cuda
Prediction done
sending off prediction to background worker for resampling and export
done with 1113

Predicting 1116:
perform_everything_on_device: True
Input shape: torch.Size([1, 289, 256, 174])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 27, image size is torch.Size([289, 256, 174]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 64, 129], [0, 64, 128], [0, 31, 62]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 289, 256, 174])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 27, image size is torch.Size([289, 256, 174]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 64, 129], [0, 64, 128], [0, 31, 62]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 289, 256, 174])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 27, image size is torch.Size([289, 256, 174]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 64, 129], [0, 64, 128], [0, 31, 62]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 289, 256, 174])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 27, image size is torch.Size([289, 256, 174]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 64, 129], [0, 64, 128], [0, 31, 62]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 289, 256, 174])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 27, image size is torch.Size([289, 256, 174]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 64, 129], [0, 64, 128], [0, 31, 62]]
move image to device cuda
preallocating results arrays on device cuda
Prediction done
sending off prediction to background worker for resampling and export
done with 1116

Predicting 1119:
perform_everything_on_device: True
Input shape: torch.Size([1, 227, 212, 159])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([227, 212, 159]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 67], [0, 42, 84], [0, 47]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 227, 212, 159])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([227, 212, 159]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 67], [0, 42, 84], [0, 47]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 227, 212, 159])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([227, 212, 159]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 67], [0, 42, 84], [0, 47]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 227, 212, 159])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([227, 212, 159]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 67], [0, 42, 84], [0, 47]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 227, 212, 159])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([227, 212, 159]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 67], [0, 42, 84], [0, 47]]
move image to device cuda
preallocating results arrays on device cuda
Prediction done
sending off prediction to background worker for resampling and export
done with 1119

Predicting 1128:
perform_everything_on_device: True
Input shape: torch.Size([1, 216, 207, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([216, 207, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 56], [0, 40, 79], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 216, 207, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([216, 207, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 56], [0, 40, 79], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 216, 207, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([216, 207, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 56], [0, 40, 79], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 216, 207, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([216, 207, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 56], [0, 40, 79], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Input shape: torch.Size([1, 216, 207, 165])
step_size: 0.5
mirror_axes: (0, 1, 2)
n_steps 12, image size is torch.Size([216, 207, 165]), tile_size [160, 128, 112], tile_step_size 0.5
steps:
[[0, 56], [0, 40, 79], [0, 53]]
move image to device cuda
preallocating results arrays on device cuda
Prediction done
sending off prediction to background worker for resampling and export
done with 1128
